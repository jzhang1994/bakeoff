import csv, os

ROOT = "/well/longread/users/akl399/bakeoff"

tools = {
	"samtools": "/apps/well/samtools/1.4.1/bin/samtools",
	"flye": "/well/ont/apps/Flye-2.5/bin/flye",
	"racon": "/well/ont/apps/racon/build/bin/racon",
	"minimap2": "/well/ont/apps/minimap2-v2.14/minimap2/minimap2",
	"medaka": "/well/ont/apps/medaka/venv/bin/activate",
	"canu": "/well/ont/apps/canu-1.8/Linux-amd64/bin/canu",
	"wtdbg2": "/well/ont/apps/wtdbg2"
}

def load_regions( filename = ROOT + '/resources/regions.tsv' ):
	"""
	Returns a list of regions, each as a OrderedDict.
	Example: 
		OrderedDict([('name', 'T Cell Receptor Alpha'), 
			('acronym', 'TRA'), ('build', 'GRCh38'), 
			('chromosome', 'chr14'), ('start', '21170441'), 
			('end', '22134544'), 
			('start_sequence', 'CCTACCCCACACACTTATCACCCAGCAGGGAACCCTCAGGTTGGGCCCACAGCCCCCATT'), 
			('end_sequence', 'CCCTGGAAACCATTATTTTATTCTCTGCTTCTATGAATTTGACTATTTTAGATACCTCAAATAAGTGTAATCATGCATTATTTG')])
	"""
	regions = []
	with open( filename, newline = '' ) as file:
		regionReader = csv.DictReader( file, delimiter = '\t' )
		for region in regionReader:
			regions.append( dict( region ))
	return regions

regions = load_regions()
acronyms = [region['acronym'] for region in regions]

def get_region_definition(acronym, build, regions):
	result = [ region for region in regions if region['build'] == build and region['acronym'] == acronym ]
	if len( result ) != 1:
		raise Exception( "No region with  acronym %s and build %s can be found." % ( acronym, build ) )
	return result[0]

def get_output_path(build, acronym, method):
	return ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/{method}/".format(build=build, acronym=acronym, method=method)

def get_output_file(build, acronyms, method):
	return get_output_path(build, acronyms, method) + "Output.symlink.fasta"


wildcard_constraints:
	build='GRCh3[7|8]',
	acronym=r'\w+'





rule Extract_target_region:
	input: 
		bam = lambda wildcards: "/well/longread/projects/nanopore/data/minimap2_all-build{build_number}.bam".format(build_number = wildcards.build[4:]),
		region_definition = ROOT + '/resources/regions.tsv'

	output:
		reads = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/Extract_target_region/reads.fastq"
	
	params:
		chromosome = lambda wildcards: get_region_definition(wildcards.acronym, wildcards.build, regions)["chromosome"],
		start = lambda wildcards: get_region_definition(wildcards.acronym, wildcards.build, regions)["start"],
		end = lambda wildcards: get_region_definition(wildcards.acronym, wildcards.build, regions)["end"],
		samtools = tools['samtools'],

	shell:
		"{params.samtools} view -b {input.bam} {params.chromosome}:{params.start}-{params.end} | {params.samtools} fastq - > {output.reads}"

rule Flye:
	input: 
		reads = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/Extract_target_region/reads.fastq"

	output: 
		consensus = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/flye-racon-medaka/Flye/assembly.fasta",
		symlink = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/flye-racon-medaka/Racon_input.symlink.fasta"

	params:
		flye = tools['flye'],
		output_folder = lambda wildcards: get_output_path(wildcards.build, wildcards.acronym, wildcards.method) + "Flye/"

	shell: 
		"""
		echo "STEP: Flye; Build: {wildcards.build}; Acronym: {wildcards.acronym}; Method: flye-racon-medaka"
		{params.flye} --nano-raw {input.reads} -g 1m -o {params.output_folder} -t 4 --asm-coverage 40
		ln -s {output.consensus} {output.symlink}
		"""

rule Racon:
	input: 
		scaffold = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/{method}/Racon_input.symlink.fasta",
		reads = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/Extract_target_region/reads.fastq"

	output:
		scaffold = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/{method}/3xRacon/racon-3.ctg.fa.gz",
		symlink = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/{method}/Medaka_input.symlink.ctg.fa.gz"

	params:
		racon = tools['racon'],
		minimap2 = tools['minimap2'],
		output_folder = lambda wildcards: get_output_path(wildcards.build, wildcards.acronym, wildcards.method) + "3xRacon/"

	shell:
		"""
		echo "STEP: Racon; Build: {wildcards.build}; Acronym: {wildcards.acronym}; Method: {wildcards.method}"
		SCAFFOLD={input.scaffold}
		READS={input.reads}
		for ROUND in $(seq -w 1 3); do
			echo "Running round ${{ROUND}} consensus..."
    		READS2TIGS={params.output_folder}racon-${{ROUND}}.paf.gz
    		NEWSCAF={params.output_folder}racon-${{ROUND}}.ctg.fa.gz

    		{params.minimap2} -t 4 ${{SCAFFOLD}} ${{READS}} | gzip -1 > ${{READS2TIGS}}
    		{params.racon} -m 8 -x -6 -g -8 -t 4 -q -1 -w 500 ${{READS}} ${{READS2TIGS}} ${{SCAFFOLD}} | gzip -1 > ${{NEWSCAF}}

    		rm ${{READS2TIGS}} &
    		SCAFFOLD=${{NEWSCAF}}
    	done

    	ln -s {output.scaffold} {output.symlink}
		"""

rule Medaka:
	input: 
		scaffold = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/{method}/Medaka_input.symlink.ctg.fa.gz",
		reads = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/Extract_target_region/reads.fastq"

	output:
		assembly = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/{method}/Medaka/consensus.fasta",
		symlink = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/{method}/Output.symlink.fasta"

	params:
		medaka = tools['medaka'],
		output_folder = lambda wildcards: get_output_path(wildcards.build, wildcards.acronym, wildcards.method) + "Medaka/"

	shell:
		"""
		echo "STEP: Medaka; Build: {wildcards.build}; Acronym: {wildcards.acronym}; Method: {wildcards.method}"
		# set +u and set -u are necessary: see https://snakemake.readthedocs.io/en/stable/project_info/faq.html#my-shell-command-fails-with-with-errors-about-an-unbound-variable-what-s-wrong
		set +u; source {params.medaka}; set -u
		medaka_consensus -i {input.reads} -d {input.scaffold} -o {params.output_folder} -t 4 -m r941_prom_high

		ln -s {output.assembly} {output.symlink}
		"""

rule Canu:
	input: 
		reads = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/Extract_target_region/reads.fastq"
	
	output:
		consensus = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/canu-racon-medaka/Canu/canu.contigs.fasta",
		symlink = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/canu-racon-medaka/Racon_input.symlink.fasta"

	params: 
		canu = tools['canu'],	
		output_folder = lambda wildcards: get_output_path(wildcards.build, wildcards.acronym, "canu-racon-medaka") + 'Canu/'
	
	shell:
		"""
		echo "STEP: Canu; Build: {wildcards.build}; Acronym: {wildcards.acronym}; Method: canu-racon-medaka"

		module load gcc/5.4.0
		module load java/1.8.0_latest
		{params.canu} -d {params.output_folder} -p canu genomeSize=1m 'useGrid=false' -nanopore-raw {input.reads}
		ln -s {output.consensus} {output.symlink}
		"""

rule Wtdbg2:
	input:
		reads = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/Extract_target_region/reads.fastq"
	
	output:
		consensus = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/wtdbg2-racon-medaka/Wtdbg2/wtdbg2.ctg.fa",
		symlink = ROOT + "/analysis/de_novo_assembly/data/{build}/{acronym}/wtdbg2-racon-medaka/Racon_input.symlink.fasta"

	params:
		wtdbg2 = tools['wtdbg2'],
		output_prefix = lambda wildcards: get_output_path(wildcards.build, wildcards.acronym, "wtdbg2-racon-medaka") + 'Wtdbg2/wtdbg2'
	
	shell:
		"""
		{params.wtdbg2}//wtdbg2 -x ont -g 1m -t 4 -i {input.reads} -fo {params.output_prefix}
		{params.wtdbg2}/wtpoa-cns -t 4 -i {params.output_prefix}.ctg.lay.gz -fo {params.output_prefix}.ctg.fa

		ln -s {output.consensus} {output.symlink}
		"""


rule All:
	input:
		output_file = [ get_output_file(build, acronym, method) 
			for build in ["GRCh37", "GRCh38"] 
			for acronym in acronyms 
			for method in ['flye-racon-medaka', 'canu-racon-medaka', 'wtdbg2-racon-medaka']]


